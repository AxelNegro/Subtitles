# Travis CI (MIT License) configuration file for Subtitles WordPress Plugin
# @link https://travis-ci.org/

# For use with the Subtitles WordPress Plugin
# @link https://github.com/philiparthurmoore/Subtitles

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
php:
    # aliased to a recent 5.5.x version
    - "5.5"
    # aliased to a recent 5.4.x version
    - "5.4"
    # aliased to a recent 5.3.x version
    - "5.3"
    # Current $required_php_version for WordPress: 5.2.4
    - "5.2"

# Declare which versions of WordPress to test against.
# Also declare whether or not to test in Multisite.
env:
    # Trunk
    # @link https://github.com/WordPress/WordPress
    - WP_VERSION=master WP_MULTISITE=0
    - WP_VERSION=master WP_MULTISITE=1
    # WordPress 3.9
    # @link https://github.com/WordPress/WordPress/tree/3.9-branch
    - WP_VERSION=3.9 WP_MULTISITE=0
    - WP_VERSION=3.9 WP_MULTISITE=1
    # WordPress 3.8
    # @link https://github.com/WordPress/WordPress/tree/3.8-branch
    - WP_VERSION=3.8 WP_MULTISITE=0
    - WP_VERSION=3.8 WP_MULTISITE=1
    # WordPress 3.7
    # @link https://github.com/WordPress/WordPress/tree/3.7-branch
    - WP_VERSION=3.7 WP_MULTISITE=0
    - WP_VERSION=3.7 WP_MULTISITE=1

# Declare 5.6 beta in test matrix.
# @link https://buddypress.trac.wordpress.org/ticket/5620
# @link http://docs.travis-ci.com/user/build-configuration/
matrix:
    include:
        - php: 5.6
          env: WP_VERSION=master
    allow_failures:
        - php: 5.6
    fast_finish: true

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update
before_install:

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
before_script:
    # Set up WordPress installation.
    - export WP_DEVELOP_DIR=/tmp/wordpress/
    - mkdir -p $WP_DEVELOP_DIR
    # Use the Git mirror of WordPress.
    - git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
    # Set up Subtitles plugin information.
    - plugin_slug=$(basename $(pwd))
    - plugin_dir=$WP_DEVELOP_DIR/src/wp-content/plugins/$plugin_slug
    - cd ..
    - mv $plugin_slug $plugin_dir
    # Set up WordPress configuration.
    - cd $WP_DEVELOP_DIR
    - echo $WP_DEVELOP_DIR
    - cp wp-tests-config-sample.php wp-tests-config.php
    - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
    - sed -i "s/yourusernamehere/root/" wp-tests-config.php
    - sed -i "s/yourpasswordhere//" wp-tests-config.php
    # Create WordPress database.
    - mysql -e 'CREATE DATABASE wordpress_test;' -uroot
    # Install CodeSniffer for WordPress Coding Standards checks.
    - pear config-set auto_discover 1
    - pear install --alldeps PHP_CodeSniffer
    - git clone git://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git $(pear config-get php_dir)/PHP/CodeSniffer/Standards/WordPress
    - cd $plugin_dir
    # After CodeSniffer install you should refresh your path.
    - phpenv rehash

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # phpunit
    # @link https://github.com/sebastianbergmann/phpunit/
    - phpunit
    # WordPress Coding Standards
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings (shortcut for --warning-severity=0)
    # --standard: Use WordPress as the standard.
    # --extensions: Only sniff PHP files.
    - phpcs -p -s -v -n . --standard=WordPress --extensions=php

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    slack:
        secure: mpcHlQk7H1tdLakdkthf4sSuQ+rCV/4Y8TTaxYrBlawtbVF6z8to6CU0KDbjAHnq7OnuOFmta7o8ku3TTzs+nVohkVOTQqgnFC6KIDkXd1mLk4wqCAt39FQc4ZyW3MzqZLaZUKXTvb4HvuhTo1tSocHnJRBKNWuMZlDltZjr894=